from telethon import TelegramClient, events
from telethon.errors import (ChannelPrivateError, ChatIdInvalidError)
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from dotenv import load_dotenv
from os import getenv
from collections import OrderedDict
import asyncio

load_dotenv()
phone = getenv("PHONE")
api_id = getenv("API_ID")
api_hash = getenv("API_HASH")
session_name = getenv("SESSION_NAME")
bot_api = getenv("BOT_API")

"""
–Ω—É–∂–µ–Ω id —á–∞—Ç–∞!!!
"""

bot = Bot(token=bot_api)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
client = TelegramClient(session_name, api_id, api_hash, system_version='4.16.30-vxCUSTOM')

class Monitor:
    def __init__(self, bot: Bot):
        self.active_tasks = {}
        self.bot = bot
        self.me = None
        self.chats = {}
        self.chats_lock = asyncio.Lock() # —Ñ–æ—Ä–º–∞—Ç —á–∞—Ç–æ–≤: {chat_id: {message_id: 'text1', another_message_id: 'text2'}}
        self.MAX_MESSAGES = 100

    async def async_init(self):
        self.me = (await client.get_me()).id
        await self.bot.send_message(self.me, f"üîé –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞). –¢–≤–æ–π ID: {self.me}")


    async def check_deleted_messages(self, chat_id):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while chat_id in self.chats:
            try:
                messages = await client.get_messages(chat_id, limit=50)
                messages_ids = {msg.id for msg in messages}

                for msg_id in list(self.chats[chat_id].keys()):
                    if msg_id not in messages_ids:
                        deleted_text = self.chats[chat_id].pop(msg_id, None)
                        if deleted_text:
                            await self.bot.send_message(self.me, f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {deleted_text}")

                await asyncio.sleep(60)


            except (ChannelPrivateError, ChatIdInvalidError) as e:
                print(f"–ß–∞—Ç {chat_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                break

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ check_deleted_messages: {e}")
                await asyncio.sleep(10)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

    async def new_msg(self, event):
        if not event.out and event.chat_id in self.chats:
            async with self.chats_lock:
                self.chats[event.chat_id][event.id] = event.text

                if event.text is not None:
                    await self.bot.send_message(self.me, f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {event.text}")

                if len(self.chats[event.chat_id]) > self.MAX_MESSAGES:
                    oldest_msg_id, oldest_msg_text = self.chats[event.chat_id].popitem(last=False)
                    await self.bot.send_message(self.me, f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {oldest_msg_id} –≤ —á–∞—Ç–µ {event.chat_id}: {oldest_msg_text}")

                if event.chat_id not in self.active_tasks: #–¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑
                    self.active_tasks[event.chat_id] = asyncio.create_task(self.check_deleted_messages(event.chat_id))

    async def edited_msg(self, event):
        if not event.out and event.chat_id in self.chats:
            async with self.chats_lock:
                sender = await event.get_sender()
                await self.bot.send_message(self.me, f"–ò–∑–º–µ–Ω–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ {event.id} –≤ —á–∞—Ç–µ {event.chat_id} ({sender.first_name} {'' if sender.username is None else '@' + sender.username}): ¬´{self.chats[event.chat_id][event.id]}¬ª –Ω–∞ ¬´{event.text}¬ª")
                self.chats[event.chat_id][event.id] = event.text

    async def handler_turn(self, event):
        if event.out:
            async with self.chats_lock:
                command = event.text.split()[1]
                if command.is_digit():
                    command = bool(int(command))
                    id_ = event.chat_id

                    if command:
                        if id_ in self.chats:
                            await self.bot.send_message(self.me, f'Id {id_} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤')
                        else:
                            self.chats[id_] = OrderedDict()
                            await self.bot.send_message(id_, '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!')

                    else:
                        if id_ in self.chats:
                            self.chats.pop(id_)
                            await self.bot.send_message(id_, '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω!')
                        else:
                            await self.bot.send_message(self.me, f'Id {id_} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤')
                else:
                    await self.bot.send_message(self.me, f'–ù–µ–≤–µ—Ä–Ω–∞—è –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤ —á–∞—Ç–µ {event.chat_id}')


    async def setup_handlers(self):
        client.add_event_handler(self.new_msg, events.NewMessage())
        client.add_event_handler(self.edited_msg, events.MessageEdited())
        client.add_event_handler(self.handler_turn, events.NewMessage(pattern=r'^/handler'))

async def main():
    monitor = Monitor(bot)
    await monitor.async_init()
    await client.start(phone)
    await monitor.setup_handlers()

    await asyncio.gather(
        dp.start_polling(bot),
        client.run_until_disconnected()
    )

if __name__ == '__main__':
    try:
        client.loop.run_until_complete(main())
    except KeyboardInterrupt:
        print("\nüö´ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    finally:
        client.loop.close()